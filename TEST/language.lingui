LANGUAGE

    MainMenu

    GetDate day month year
        return day ~ "/" ~ month ~ "/" ~ year

    :Chests #count

    :Swords :count

    :NoSwords
        return Swords( 0* )

    :OneSword
        return Swords( 1* )

    TheItems :items

    TheItemsHaveBeenFound :items

    Dump :this
        "\"" ~ $this ~ "\" / \"" ~ *this ~ "\" / '" ~ ^this ~ "' / "
        if !this
            GetIntegerText( #this ) ~ " / "
        if .this
            GetRealText( %this ) ~ " / "

        GetPluralityText( @this ) ~ " / " ~ GetPluralityText( °this ) ~ " / " ~ GetGenreText( &this ) ~ "\n"

    !GetOppositeBoolean !value
        var !result
        result = not value
        return result

    #GetOppositeInteger #value
        var #result
        result = - value
        return result

    %GetOppositeReal %value
        var %result
        result = - value
        return result

    GetOppositeString value
        var result
        result = "not " ~ value
        return result

    :GetOppositeTranslation :value
        var :result
        *result = *value
        $result = "not " ~ $value
        &result = &value
        return result

    :GetInverseTranslation :value
        *result = *value
        $result = "one over " ~ $value
        &result = &value

    TestConditions #value
        $value
        if value < 0
            if value < -20
                " < -20"
            elseif value < -10
                " < -10"
            else
                " < 0"
        else if value > 0
            if value > 20
                " > 20"
            elseif value > 10
                " > 10"
            else
                " > 0"
        else
            " = 0"
        "\n"

    TestFunctions
        var !opposite_boolean #opposite_integer %opposite_real opposite_string :opposite_translation :inverse_translation
        opposite_boolean = GetOppositeBoolean( true )
        opposite_integer = GetOppositeInteger( 1 )
        opposite_real = GetOppositeReal( 1.0 )
        opposite_string = GetOppositeString( "one" )
        opposite_translation = GetOppositeTranslation( 1*"one":neutral )
        inverse_translation = GetInverseTranslation( 1*"x":neutral )
        $opposite_boolean ~ " / " ~ $opposite_integer ~ " / " ~ $opposite_real ~ " / " ~ opposite_string ~ " / " ~ $opposite_translation ~ " / " ~ $inverse_translation ~ "\n"
        GetBooleanText( false ) ~ " / " ~ GetBooleanText( true ) ~ "\n"
        GetIntegerText( -12, 4 ) ~ " / " ~ GetIntegerText( 12, 4 ) ~ "\n"
        GetIntegerText( -12 ) ~ " / " ~ GetRealText( -12.0, -1 ) ~ " / " ~ GetRealText( -12.0 ) ~ " / " ~ GetRealText( -12.0, 3 ) ~ " \n"
        GetRealText( -12.3, 3, 3, '_' ) ~ " / " ~ GetRealText( -12.345 ) ~ " / " ~ GetRealText( -12.3456789, 0, 3, DotCharacter ) ~ "\n"
        GetLowerCase( "jack SPARROW" ) ~ " / " ~ GetUpperCase( "john MCLANE" ) ~ "\n"
        GetSentenceCase( "jason bourne" ) ~ " / " ~ GetTitleCase( "james kirk" ) ~ "\n"

        Dump( MakeTranslation( "cm" ) )
        Dump( MakeTranslation( "cm", "0" ) )
        Dump( MakeTranslation( "cm", "1" ) )
        Dump( MakeTranslation( "cm", "2" ) )
        Dump( MakeTranslation( "cm", "-12.345" ) )
        Dump( MakeTranslation( "cm", "-12.345", male ) )
        Dump( MakeTranslation( 12 ) )
        Dump( MakeTranslation( 12, female ) )

        Dump( 3* )
        Dump( 4*"perros" )
        Dump( 5*"fiestas":female )
        Dump( 6.5* )
        Dump( 7.5*"metros" )
        Dump( 8.5*"vueltas":female )

        GetText( "English" ) ~ " / " ~ GetText( "French" ) ~ " / " ~ GetDate( "18", "2", "2018" ) ~ "\n"

    :Kings :count
        $result = "reyes"
        *result = *count
        &result = male

    Test
        var :no_chests :one_chest
        no_chests = Chests( 0 )
        one_chest = Chests( 1 )

        TheItemsHaveBeenFound( no_chests )
        TheItemsHaveBeenFound( one_chest )
        TheItemsHaveBeenFound( Chests( 2 ) )
        TheItemsHaveBeenFound( NoSwords() )
        TheItemsHaveBeenFound( OneSword() )
        TheItemsHaveBeenFound( Swords( 2* ) )

        TestFunctions()

        TestConditions( -25 )
        TestConditions( -15 )
        TestConditions( -5 )
        TestConditions( 0 )
        TestConditions( 5 )
        TestConditions( 15 )
        TestConditions( 25 )

        var :kings :queens :princes
        kings = Kings( 1* )
        $queens = "reinas"
        *queens = "2"
        &queens = female
        princes = 3*"príncipes":male

        $kings ~ " " ~ $queens ~ " " ~ $princes ~ "\n"
